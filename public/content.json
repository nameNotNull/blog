{"meta":{"title":"more","subtitle":null,"description":null,"author":"linode","url":"https://lessandmore.gitee.io"},"pages":[{"title":"about","date":"2018-08-02T02:53:04.000Z","updated":"2018-08-03T07:47:11.829Z","comments":false,"path":"about/index.html","permalink":"https://lessandmore.gitee.io/about/index.html","excerpt":"","text":"","raw":null,"content":null},{"title":"分类页","date":"2018-08-02T02:52:46.000Z","updated":"2018-08-03T07:47:11.830Z","comments":false,"path":"categories/index.html","permalink":"https://lessandmore.gitee.io/categories/index.html","excerpt":"","text":"","raw":null,"content":null},{"title":"tags","date":"2018-08-02T04:58:27.000Z","updated":"2018-08-03T07:47:11.831Z","comments":false,"path":"tags/index.html","permalink":"https://lessandmore.gitee.io/tags/index.html","excerpt":"","text":"","raw":null,"content":null}],"posts":[{"title":"yaf的单元测试","slug":"unit-test","date":"2018-08-17T02:46:02.000Z","updated":"2018-08-30T06:02:30.953Z","comments":true,"path":"2018/08/17/unit-test/","link":"","permalink":"https://lessandmore.gitee.io/2018/08/17/unit-test/","excerpt":"","text":"单元测试的目的是为了验证系统中某一部分逻辑的功能是否正确。在多人开发的过程中，各个功能模块可能会互相调用，编写单元测试和执行单元测试能有效提高代码的健壮性、可靠性。单元测试能够屏蔽其他模块的依赖，mock可以解决其他模块的依赖问题。PHP的单元测试实际项目很少有人有耐心去写，今天总结一下，简单的单元测试其实很容易编写，由于yaf的自动加载的问题比较麻烦，今天重点记录yaf的单元测试常用写法。 PHPUnitPHPUnit是php的一个测试框架，封装了大量测试php的类和方法，这里我打算用这个组件进行单元测试。PHPUnit可以由composer进行安装，在yaf目录中配置composer.json文件 &quot;require&quot;: { &quot;phpunit/phpunit&quot;: &quot;6.0.8&quot; } 执行composer install即可 PHPUnit 的测试类继承于 TestCase 类，该类的父类实现了断言assertEquals和模拟数据createMock 断言就是验证某个接口或者对象的值是否和预期一致，执行单元测试命令时，在结果里会显示断言的数量以及断言验证的结果正确数 $this-&gt;assertEquals(1,XX_Model::getInstance()-&gt;getListByUserId(&#39;123&#39;)); 模拟数据就是解决其他模块的依赖，生成mock数据 $stub = $this-&gt;createMock(XX_Model::class); $stub-&gt;method(&#39;get&#39;)-&gt;willReturn(3); $this-&gt;assertEquals(3,$stub-&gt;get(1)); 上述stub的get方法就必然返回3，更复杂的依赖解决参见 more info 在yaf项目目录下新建一个test目录，创建单元测试文件test.php 创建测试类，测试类的成员方法必须是以test开头，执行单元测试命令时，会顺序执行这些test方法 yaf的自动加载需要配合yaf的bootstrap指定加载方法 $application = new Yaf\\Application(ROOT_PATH . &quot;/config/application.ini&quot;,&#39;develop&#39;); $application-&gt;bootstrap(); Yaf\\Registry::set(&#39;application&#39;, $application); 整个单元测试的样例如下 &lt;?php /** * 1、composer 安装Monolog日志扩展，安装phpunit单元测试扩展包 * 2、引入autoload.php文件 * 3、测试案例 * * // */ //namespace App\\tests; ini_set(&#39;yaf.name_separator&#39;, &#39;_&#39;); require_once __DIR__ . &#39;/../vendor/autoload.php&#39;; define(&quot;ROOT_PATH&quot;, dirname(__DIR__) . &quot;/&quot;); use Monolog\\Logger; use Monolog\\Handler\\StreamHandler; use PHPUnit\\Framework\\TestCase; use Yaf\\Bootstrap_Abstract; use Yaf\\Dispatcher; use Yaf\\Loader; use Yaf\\Registry; define(&#39;APPLICATION_PATH&#39;, ROOT_PATH . &#39;/application&#39;); class YafTest extends TestCase { public function testSearch() { $application = new Yaf\\Application(ROOT_PATH . &quot;/config/application.ini&quot;,&#39;develop&#39;); $application-&gt;bootstrap(); Yaf\\Registry::set(&#39;application&#39;, $application); $this-&gt;assertEquals(1,XX_Model::getInstance()-&gt;getListByUserId(&#39;123&#39;)); $stub = $this-&gt;createMock(XX_Model::class); $stub-&gt;method(&#39;get&#39;)-&gt;willReturn(3); //2 $this-&gt;assertEquals(3,$stub-&gt;get(1)); } public function Log() { // create a log channel $log = new Logger(&#39;Tester&#39;); $log-&gt;pushHandler(new StreamHandler(ROOT_PATH . &#39;storage/logs/app.log&#39;, Logger::WARNING)); return $log; } } 执行单元测试 php ./vendor/bin/phpunit tests/test.php 实际效果 额外说明一下，php的xdebug扩展和phpunit是不兼容的，执行单元测试，需要关闭xdebug扩展。 More info: phpunit依赖解决","raw":null,"content":null,"categories":[{"name":"php","slug":"php","permalink":"https://lessandmore.gitee.io/categories/php/"}],"tags":[{"name":"PHP","slug":"PHP","permalink":"https://lessandmore.gitee.io/tags/PHP/"}]},{"title":"hexo使用gitalk","slug":"comment-gitalk","date":"2018-08-02T07:26:13.000Z","updated":"2018-08-30T06:02:45.461Z","comments":true,"path":"2018/08/02/comment-gitalk/","link":"","permalink":"https://lessandmore.gitee.io/2018/08/02/comment-gitalk/","excerpt":"","text":"hexo评论插件gitalk在博客上增加了一个评论插件，gitalk. 基于github的issue做的评论原理就是github以app授权的方式让博客拿到repo的权限，页面在加载时，提示用户登录github，对某个issue进行评论列表加载、评论回复、点赞等操作。 More info: gitalk 在github上申请应用授权授权地址 Application name－－应用名称,填写自己可以随意增加issue的repo名字 Homepage URL－－如上图可以填本地地址进行测试,127.0.0.1:port/xx/xx Application description－－应用描述,随意填 Authorization callback URL－－发布到线上的博客地址,github在验证登录后会回调返回登录授权的access_token，后续评论、点赞都是通过access_token去取github某个issue的数据 配置hexo的文件themes/next/layout/_third-party/comments/gitalk.swig{% if page.comments && theme.gitalk.enable %} var gitalk = new Gitalk({ clientID: '{{ theme.gitalk.ClientID }}', clientSecret: '{{ theme.gitalk.ClientSecret }}', repo: '{{ theme.gitalk.repo }}', owner: '{{ theme.gitalk.githubID }}', admin: ['{{ theme.gitalk.adminUser }}'], id: location.pathname, distractionFreeMode: '{{ theme.gitalk.distractionFreeMode }}' }) gitalk.render('gitalk-container') {% endif %} 实际就是调用gitalk封装的js初始化github的issue 配置themes/next/_config.yml最后一行后添加ClientID 和ClientSecret的配置 gitalk: enable: true githubID: nameNotNull repo: blog owner: nameNotNull admin: nameNotNull ClientID: xx ClientSecret: xxx adminUser: nameNotNull distractionFreeMode: true 配置themes/next/layout/_partials/comments.swig最后一个endif前添加评论页面样式 {% elseif theme.valine.appid and theme.valine.appkey %} &lt;div class=&quot;comments&quot; id=&quot;comments&quot;&gt; &lt;/div&gt; {% elseif theme.gitalk.enable %} &lt;div id=&quot;gitalk-container&quot;&gt;&lt;/div&gt; {% endif %} {% endif %} 配置themes/next/source/css/_common/components/third-party/third-party.styl引入gitalk的配置，最后一行添加 @import &quot;gitalk&quot;; 至此，则将gitalk的js加载到页面，用户点击文章详情页，默认唤起github的授权登录，js跳转授权页面，成功登录后即可发布评论（实际是发布issue :smile:）","raw":null,"content":null,"categories":[{"name":"工具","slug":"工具","permalink":"https://lessandmore.gitee.io/categories/工具/"}],"tags":[{"name":"gitalk","slug":"gitalk","permalink":"https://lessandmore.gitee.io/tags/gitalk/"}]},{"title":"API命名规范","slug":"api-norm","date":"2018-08-02T05:02:12.000Z","updated":"2018-08-02T06:08:22.182Z","comments":true,"path":"2018/08/02/api-norm/","link":"","permalink":"https://lessandmore.gitee.io/2018/08/02/api-norm/","excerpt":"","text":"基本格式protocol://hostname[:port]/path/action.type[?query] 协议://主机名[:端口]/ 路径/操作.返回类型:[参数] 通用命名不要关键字作为名称 为了避免增删改查等高频操作使用不同词汇从而增加了沟通和维护的成本，对类似含义的词汇进行合并。 参考了使用频率较高的最为优先选择。 create remove modify search以列表方式展现 detail以详情方式展现 summary以概要方式展现 suggestion搜索提示","raw":null,"content":null,"categories":[{"name":"php","slug":"php","permalink":"https://lessandmore.gitee.io/categories/php/"}],"tags":[{"name":"api规范","slug":"api规范","permalink":"https://lessandmore.gitee.io/tags/api规范/"}]},{"title":"立个Flag","slug":"hello-world","date":"2018-08-01T03:06:02.000Z","updated":"2018-08-02T04:57:21.826Z","comments":true,"path":"2018/08/01/hello-world/","link":"","permalink":"https://lessandmore.gitee.io/2018/08/01/hello-world/","excerpt":"","text":"正好最近有心情，重新把自己的博客搭起来，继续写一些有价值的文章，坚持下去 目标打算写一个系列，总结一些初级程序员经常犯的错误，系统总结一下，如何避免和提升。 初级程序员经常犯的错误 命名不规范 日志不规范 拒绝写接口和假数据 不写单元测试 盲目集成 逻辑不清 不做方案 不关注性能 害怕重构 做出来就好，不考虑优雅的方案 不考虑未来需求的变化 遇到问题的时候不会试错 不会写伪代码 不做数据量的预估 提交代码不规范 不喜欢打 不遵守发布流程 不知道Bug修复的优先级 总喜欢手动修改线上代码 不做数据备份 不做自测 不尽力模仿真实数据，测试数据很随意 不抽取公共代码 不认真听需求讲解 不看验收标准 不主动推进项目进度 More info: 初级程序员常见错误 计划 命名的规范，代码的规范，参考PSR2,详见下一篇 单元测试一直没详细研究过，这次做个系统的研究 代码发布，git的使用小技巧","raw":null,"content":null,"categories":[{"name":"杂谈","slug":"杂谈","permalink":"https://lessandmore.gitee.io/categories/杂谈/"}],"tags":[{"name":"计划","slug":"计划","permalink":"https://lessandmore.gitee.io/tags/计划/"}]}]}